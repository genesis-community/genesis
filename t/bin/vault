#!/bin/bash
set -e

bail() {
	printf >&2 $*
	exit 2
}

mkdir -p t/tmp/home t/vaults

version="0.9.3"
platform=
arch=amd64
case $OSTYPE in
(darwin*) platform=darwin ;;
(linux*)  platform=linux  ;;
(*)
	echo >&2 "UNRECOGNIZED OSTYPE '$OSTYPE'"
	exit 1
	;;
esac

if [[ ! -f t/vaults/vault-${version} ]]; then
	printf >&2 "\rDownloading Vault ${version} CLI..."
	curl --fail -sLk > t/tmp/archive.zip \
		https://releases.hashicorp.com/vault/${version}/vault_${version}_${platform}_${arch}.zip \
		|| bail "\nFAILED - could not download of vault ${version}"

	unzip -d t/tmp t/tmp/archive.zip > /dev/null 2>&1
	mv t/tmp/vault t/vaults/vault-${version}
	printf >&2 "nDONE\n\n"
fi

old_home=$HOME
export HOME=${PWD}/t/tmp/home
touch $HOME/.vault_token  # Hack around safe init issue

rm -rf t/tmp/home ; mkdir -p t/tmp/home
port=8200
while lsof -nP -i ":$port" | grep ":$port\s*(LISTEN)" >/dev/null 2>&1 ; do
  [[ $((++port)) -gt 8300 ]] && bail "No free ports available for dev vault server"
done
./t/vaults/vault-${version} server -config <(cat <<EOF
listener "tcp" {
  address     = "127.0.0.1:$port"
  tls_disable = 1
}
storage "inmem" {}
EOF
) >$HOME/log 2>&1 &
vault_pid=$!
printf >&2 "\rStarting Vault ${version} CLI on port $port (pid: $vault_pid)..."
waitfor=600
while ! lsof -a -p $vault_pid -i tcp:$port -s TCP:listen -nP >/dev/null 2>&1; do
	if [[ $waitfor -gt 0 ]]; then
		waitfor=$((waitfor - 1))
		sleep 0.1
	else
		bail "\nFAILED - timed out waiting for vault server to start\n"
	fi
done
safe target unit-tests http://127.0.0.1:$port >/dev/null 2>&1
safe auth token <<<"dummy" > /dev/null 2>&1 # Another Hack around safe init issue
root_token=$(safe init --json | jq -r '.root_token')
safe auth token <<<${root_token} >/dev/null 2>&1
if ! safe exists "secret/handshake" ;  then 
  bail "\nFAILED - failed to unseal vault\n"
fi

printf >&2 "done.\n"
echo $vault_pid
exit 0
